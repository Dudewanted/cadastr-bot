"""
üèÅ –û–°–ù–û–í–ù–û–ô –ú–û–î–£–õ–¨ –ó–ê–ü–£–°–ö–ê –ë–û–¢–û–í

‚ñå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚îú‚îÄ‚îÄ üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
‚îú‚îÄ‚îÄ üõ† –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
‚îî‚îÄ‚îÄ üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

‚ñå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
‚úî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
‚úî –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
‚úî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞
‚úî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import asyncio
import logging
from dotenv import load_dotenv

# ====================
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´
# ====================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout.reconfigure(encoding='utf-8', errors='replace')
    sys.stderr.reconfigure(encoding='utf-8', errors='replace')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='üèÅ [%(asctime)s] %(levelname)s - %(name)s: %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('app.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ====================
# üì¶ –ò–ú–ü–û–†–¢ –ë–û–¢–û–í
# ====================

from bots.client_bot import run_client_bot
from bots.admin_bot import run_admin_bot

# ====================
# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ====================

class Config:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    def __init__(self):
        self.CLIENT_BOT_TOKEN = os.getenv("CLIENT_BOT_TOKEN")
        self.ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")
        self.GSHEETS_CREDENTIALS = "secure/client_secret.json"
        
        self.validate()
    
    def validate(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if not self.CLIENT_BOT_TOKEN:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω CLIENT_BOT_TOKEN")
        if not self.ADMIN_BOT_TOKEN:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω ADMIN_BOT_TOKEN")
        if not os.path.exists(self.GSHEETS_CREDENTIALS):
            raise FileNotFoundError(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.GSHEETS_CREDENTIALS}")

# ====================
# üöÄ –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê
# ====================

async def run_bots(config: Config) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–æ–≤ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    tasks = [
        asyncio.create_task(_run_bot_safely(run_client_bot, config.CLIENT_BOT_TOKEN, "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç")),
        asyncio.create_task(_run_bot_safely(run_admin_bot, config.ADMIN_BOT_TOKEN, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    ]
    await asyncio.gather(*tasks)

async def _run_bot_safely(bot_runner, token: str, bot_name: str) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º %s...", bot_name)
        await bot_runner(token)
    except Exception as e:
        logger.critical("–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ %s: %s", bot_name, e, exc_info=True)
        raise

# ====================
# üèÅ –¢–û–ß–ö–ê –í–•–û–î–ê
# ====================

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = Config()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
        asyncio.run(run_bots(config))
        
    except Exception as e:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
        sys.exit(1)
    finally:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    main()