"""
üèÅ –û–°–ù–û–í–ù–û–ô –ú–û–î–£–õ–¨ –ó–ê–ü–£–°–ö–ê –ë–û–¢–û–í
"""

import os
import sys
import asyncio
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
if sys.platform == "win32":
    sys.stdout.reconfigure(encoding='utf-8', errors='replace')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='üèÅ [%(asctime)s] %(levelname)s - %(name)s: %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    load_dotenv()
    
    config = {
        'client_token': os.getenv("CLIENT_BOT_TOKEN"),
        'admin_token': os.getenv("ADMIN_BOT_TOKEN"),
        'gsheets_creds': "secure/client_secret.json"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not config['client_token']:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω CLIENT_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        sys.exit(1)
        
    if not config['admin_token']:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω ADMIN_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        sys.exit(1)
        
    if not os.path.exists(config['gsheets_creds']):
        logger.error(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {config['gsheets_creds']}")
        sys.exit(1)
        
    return config

async def run_bot(bot_func, token, name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ %s...", name)
        await bot_func(token)
    except Exception as e:
        logger.critical("–û—à–∏–±–∫–∞ –≤ %s: %s", name, e)
        raise

async def main_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    config = load_config()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        run_bot(run_client_bot, config['client_token'], "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç"),
        run_bot(run_admin_bot, config['admin_token'], "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    )

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        asyncio.run(main_async())
    except Exception as e:
        logger.critical("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
        sys.exit(1)
    finally:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()