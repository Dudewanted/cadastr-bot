"""
üèÅ –û–°–ù–û–í–ù–û–ô –ú–û–î–£–õ–¨ –ó–ê–ü–£–°–ö–ê –ë–û–¢–û–í

‚ñå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚úî –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
‚úî –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
‚úî –ì–∏–±–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚úî –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
‚úî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
"""

import os
import sys
import asyncio
import logging
from typing import Optional, Dict, Any
from dotenv import load_dotenv

# ====================
# üõ† –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´
# ====================

def configure_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    if sys.platform == "win32":
        # –î–ª—è Windows —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
        sys.stderr.reconfigure(encoding='utf-8', errors='replace')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        raise FileNotFoundError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .env —Ñ–∞–π–ª")

def setup_logging() -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO,
        handlers=[
            logging.FileHandler('app.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger(__name__)

# ====================
# üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
# ====================

def check_dependencies() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    required_files = {
        'Google Sheets Credentials': 'secure/client_secret.json',
        'Environment File': '.env'
    }
    
    for name, path in required_files.items():
        if not os.path.exists(path):
            raise FileNotFoundError(f"{name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

# ====================
# ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ====================

class BotConfig:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –±–æ—Ç–æ–≤"""
    
    def __init__(self):
        load_dotenv()
        self.tokens = {
            'client': os.getenv("CLIENT_BOT_TOKEN"),
            'admin': os.getenv("ADMIN_BOT_TOKEN")
        }
        self._validate()
    
    def _validate(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        for name, token in self.tokens.items():
            if not token:
                raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω {name.upper()}_BOT_TOKEN –≤ .env")
    
    def get(self, bot_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        return self.tokens.get(bot_type, '')

# ====================
# ü§ñ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–ê–ú–ò
# ====================

async def run_bot_safely(bot_runner, token: str, name: str) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        bot_runner: –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
    """
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º {name}...")
        await bot_runner(token)
    except asyncio.CancelledError:
        logger.info(f"{name}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.critical(f"{name}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {str(e)}", exc_info=True)
        raise

async def run_all_bots(config: BotConfig) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    from bots import run_client_bot, run_admin_bot
    
    tasks = [
        asyncio.create_task(run_bot_safely(run_client_bot, config.get('client'), "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç")),
        asyncio.create_task(run_bot_safely(run_admin_bot, config.get('admin'), "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    ]
    
    try:
        await asyncio.gather(*tasks)
    except Exception as e:
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        for task in tasks:
            task.cancel()
        raise

# ====================
# üèÅ –¢–û–ß–ö–ê –í–•–û–î–ê
# ====================

def main() -> int:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        configure_environment()
        global logger
        logger = setup_logging()
        
        logger.info("="*50)
        logger.info("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
        logger.info("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        check_dependencies()
        config = BotConfig()
        
        # –ó–∞–ø—É—Å–∫
        asyncio.run(run_all_bots(config))
        return 0
        
    except Exception as e:
        logger.critical(f"–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}", exc_info=True)
        return 1
    finally:
        logger.info("="*50)
        logger.info("–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û –†–ê–ë–û–¢–£")
        logger.info("="*50)

if __name__ == "__main__":
    sys.exit(main())