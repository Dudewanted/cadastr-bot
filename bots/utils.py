"""
üõ† –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ë–û–¢–û–í

–°–æ–¥–µ—Ä–∂–∏—Ç:
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –≤–µ–±—Ö—É–∫–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
"""

import logging
from typing import Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class BotError(Exception):
    """üî¥ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    def __init__(self, message: str, details: Dict[str, Any] = None):
        self.message = message
        self.details = details or {}
        super().__init__(message)
        logger.error(f"BotError: {message} | Details: {details}")

def setup_webhook(config: Dict[str, Any]) -> bool:
    """
    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        
    Raises:
        BotError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è {config.get('url')}")
        return True
    except Exception as e:
        raise BotError("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞", {"error": str(e)})

def validate_config(config_path: Path) -> Dict[str, Any]:
    """
    üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    
    Args:
        config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
    Returns:
        Dict: –í–∞–ª–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        
    Raises:
        BotError: –ü—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    try:
        if not config_path.exists():
            raise BotError("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        dummy_config = {"token": "test", "webhook": {"url": "https://example.com"}}
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        return dummy_config
    except Exception as e:
        raise BotError("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", {"path": str(config_path), "error": str(e)})

def format_error_for_user(error: Exception) -> str:
    """
    üí¨ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        
    Returns:
        str: –ü–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    """
    if isinstance(error, BotError):
        return f"‚ö†Ô∏è {error.message}"
    return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"