"""
üõ† –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ô –ë–û–¢ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ê–ú–ò

‚ñå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚îú‚îÄ‚îÄ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
‚îú‚îÄ‚îÄ ‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ (–ù–æ–≤–∞—è/–í —Ä–∞–±–æ—Ç–µ/–ó–∞–≤–µ—Ä—à–µ–Ω–∞)
‚îú‚îÄ‚îÄ üìû –ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º
‚îî‚îÄ‚îÄ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

‚ñå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
‚úî –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets
‚úî –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ inline-–∫–Ω–æ–ø–∫–∏
‚úî –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
‚úî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã (Europe/Moscow)
"""

import logging
import sys
import pytz
from datetime import datetime
from typing import Dict, Any

# ====================
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´
# ====================

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='üõ† [%(asctime)s] %(name)s ‚îÇ %(levelname)-8s ‚îÇ %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('admin_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# ====================
# üì¶ –ò–ú–ü–û–†–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ====================

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from services.gsheets import get_worksheet

# ====================
# üè∑ –°–ò–°–¢–ï–ú–ê –°–¢–ê–¢–£–°–û–í
# ====================

STATUSES = {
    'new': {'text': 'üÜï –ù–æ–≤–∞—è', 'column': '–°—Ç–∞—Ç—É—Å'},
    'progress': {'text': 'üîÑ –í —Ä–∞–±–æ—Ç–µ', 'column': '–°—Ç–∞—Ç—É—Å'},
    'completed': {'text': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞', 'column': '–°—Ç–∞—Ç—É—Å'}
}

# ====================
# üìù –¢–ï–ö–°–¢–û–í–´–ï –®–ê–ë–õ–û–ù–´
# ====================

TEXTS = {
    'welcome': 
        """
        üõ† <b>–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨</b>

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """,
    
    'request': 
        """
        üìã <b>–ó–ê–Ø–í–ö–ê #{id}</b>
        
        üìç –ê–¥—Ä–µ—Å: {address}
        üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>
        üìÖ –î–∞—Ç–∞: {date}
        üè∑ –°—Ç–∞—Ç—É—Å: {status}
        """,
    
    'no_requests': 
        "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫",
    
    'status_updated':
        "üîÑ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}"
}

# ====================
# üñ• –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ====================

async def show_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    menu_buttons = [
        ["üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    
    await update.message.reply_text(
        text=TEXTS['welcome'],
        reply_markup=ReplyKeyboardMarkup(
            menu_buttons,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        ),
        parse_mode='HTML'
    )

async def show_new_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"""
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        new_requests = [r for r in records if r['–°—Ç–∞—Ç—É—Å'] == STATUSES['new']['text']]
        
        if not new_requests:
            await update.message.reply_text(TEXTS['no_requests'])
            return
        
        for request in new_requests:
            keyboard = [
                [
                    InlineKeyboardButton(
                        "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", 
                        callback_data=f"call_{request['–¢–µ–ª–µ—Ñ–æ–Ω']}"
                    ),
                    InlineKeyboardButton(
                        "üîÑ –í —Ä–∞–±–æ—Ç—É", 
                        callback_data=f"status_progress_{request['ID']}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", 
                        callback_data=f"status_completed_{request['ID']}"
                    )
                ]
            ]
            
            await update.message.reply_text(
                text=TEXTS['request'].format(
                    id=request['ID'],
                    address=request['–ê–¥—Ä–µ—Å'],
                    phone=request['–¢–µ–ª–µ—Ñ–æ–Ω'],
                    date=request['–î–∞—Ç–∞'],
                    status=request['–°—Ç–∞—Ç—É—Å']
                ),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data.startswith('call_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞
            phone = query.data.split('_')[1]
            await query.edit_message_text(f"üìû –ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: <code>{phone}</code>", parse_mode='HTML')
            
        elif query.data.startswith('status_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            action, request_id = query.data.split('_')[1], query.data.split('_')[2]
            new_status = STATUSES[action]['text']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
            worksheet = get_worksheet()
            cell = worksheet.find(request_id)
            worksheet.update_cell(cell.row, 5, new_status)
            
            await query.edit_message_text(
                text=TEXTS['status_updated'].format(
                    id=request_id,
                    status=new_status
                )
            )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –Ω–∞ '{new_status}'")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

# ====================
# üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ====================

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫"""
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        
        stats = {
            'new': 0,
            'progress': 0,
            'completed': 0
        }
        
        for r in records:
            if STATUSES['new']['text'] in r['–°—Ç–∞—Ç—É—Å']:
                stats['new'] += 1
            elif STATUSES['progress']['text'] in r['–°—Ç–∞—Ç—É—Å']:
                stats['progress'] += 1
            elif STATUSES['completed']['text'] in r['–°—Ç–∞—Ç—É—Å']:
                stats['completed'] += 1
                
        message = (
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò</b>\n\n"
            f"üÜï –ù–æ–≤—ã–µ: {stats['new']}\n"
            f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats['progress']}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n"
            f"üìå –í—Å–µ–≥–æ: {len(records)}"
        )
        
        await update.message.reply_text(
            text=message,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# ====================
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ====================

def run_admin_bot(token: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        
        application = Application.builder() \
            .token(token) \
            .build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", show_dashboard))
        application.add_handler(MessageHandler(filters.Regex("^üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏$"), show_new_requests))
        application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats))
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        logger.info("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise