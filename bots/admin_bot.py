import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    MessageHandler,
    Filters
)
import os
from dotenv import load_dotenv
from gsheets import get_worksheet
from datetime import datetime
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
WAITING_FOR_STATUS = 1

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if str(update.effective_user.id) != os.getenv('ADMIN_CHAT_ID'):
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data='check_new')],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data='list_all')]
    ]
    update.message.reply_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    
    if query.data == 'check_new':
        check_new_requests(update, context)
    elif query.data == 'list_all':
        list_all_requests(update, context)
    elif query.data.startswith('request_'):
        show_request_details(update, context)
    elif query.data.startswith('status_'):
        process_status_change(update, context)

def check_new_requests(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        new_requests = [r for r in records if r['–°—Ç–∞—Ç—É—Å'] == '–ù–æ–≤–∞—è']
        
        if not new_requests:
            update.callback_query.edit_message_text(
                text="üîÑ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
                )
            )
            return
        
        for request in new_requests:
            send_request_notification(update, context, request)
        
    except Exception as e:
        logger.error(f"Error checking new requests: {e}")
        update.callback_query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            )
        )

def list_all_requests(update: Update, context: CallbackContext) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        
        if not records:
            update.callback_query.edit_message_text(
                text="üìã –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
                )
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_groups = {}
        for request in records:
            status = request['–°—Ç–∞—Ç—É—Å']
            if status not in status_groups:
                status_groups[status] = []
            status_groups[status].append(request)
        
        text = "üìã –í—Å–µ –∑–∞—è–≤–∫–∏:\n\n"
        for status, requests in status_groups.items():
            text += f"<b>{status}</b> ({len(requests)}):\n"
            for req in requests[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                text += f"- ID: {req['ID']}, üìû {req['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
            if len(requests) > 3:
                text += f"... –∏ –µ—â–µ {len(requests)-3}\n"
            text += "\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='list_all')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        update.callback_query.edit_message_text(
            text=text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error listing requests: {e}")
        update.callback_query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            )
        )

def send_request_notification(update: Update, context: CallbackContext, request: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üöÄ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request['ID']}</b>\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {request['–ê–¥—Ä–µ—Å']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href='tel:{request['–¢–µ–ª–µ—Ñ–æ–Ω']}'>{request['–¢–µ–ª–µ—Ñ–æ–Ω']}</a>\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {request['–î–∞—Ç–∞']}\n"
        f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {request['–°—Ç–∞—Ç—É—Å']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f'call_{request["–¢–µ–ª–µ—Ñ–æ–Ω"]}'),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f'status_{request["ID"]}')
        ],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data='list_all')]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def show_request_details(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    request_id = update.callback_query.data.split('_')[1]
    
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        request = next((r for r in records if str(r['ID']) == request_id), None)
        
        if not request:
            update.callback_query.edit_message_text(
                text="‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='list_all')]]
                )
            )
            return
        
        text = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{request['ID']}</b>\n\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {request['–ê–¥—Ä–µ—Å']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href='tel:{request['–¢–µ–ª–µ—Ñ–æ–Ω']}'>{request['–¢–µ–ª–µ—Ñ–æ–Ω']}</a>\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {request['–î–∞—Ç–∞']}\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {request['–°—Ç–∞—Ç—É—Å']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f'call_{request["–¢–µ–ª–µ—Ñ–æ–Ω"]}'),
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f'status_{request["ID"]}')
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='list_all')]
        ]
        
        update.callback_query.edit_message_text(
            text=text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error showing request details: {e}")
        update.callback_query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='list_all')]]
            )
        )

def process_status_change(update: Update, context: CallbackContext) -> None:
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
    request_id = update.callback_query.data.split('_')[1]
    context.user_data['editing_request'] = request_id
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í —Ä–∞–±–æ—Ç–µ", callback_data='setstatus_–í —Ä–∞–±–æ—Ç–µ'),
            InlineKeyboardButton("‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data='setstatus_–ó–∞–≤–µ—Ä—à–µ–Ω–æ')
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", callback_data='setstatus_–û—Ç–º–µ–Ω–µ–Ω–æ'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'request_{request_id}')
        ]
    ]
    
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞—è–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def set_status(update: Update, context: CallbackContext) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"""
    query = update.callback_query
    status = query.data.split('_')[1]
    request_id = context.user_data.get('editing_request')
    
    if not request_id:
        query.edit_message_text(
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='list_all')]]
            )
        )
        return
    
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        row_num = next((i+2 for i, r in enumerate(records) if str(r['ID']) == request_id), None)
        
        if not row_num:
            query.edit_message_text(
                text="‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='list_all')]]
                )
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        worksheet.update_cell(row_num, 5, status)
        
        query.edit_message_text(
            text=f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'request_{request_id}')]]
            )
        )
        
    except Exception as e:
        logger.error(f"Error updating status: {e}")
        query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'request_{request_id}')]]
            )
        )

def call_client(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞"""
    phone = update.callback_query.data.split('_')[1]
    
    update.callback_query.edit_message_text(
        text=f"üìû –ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: <code>{phone}</code>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='list_all')]]
        )
    )

def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    try:
        update.message.reply_text(
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
    except:
        pass

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    load_dotenv()
    updater = Updater(os.getenv('ADMIN_BOT_TOKEN'))
    
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler('start', start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(CallbackQueryHandler(process_status_change, pattern='^status_'))
    dp.add_handler(CallbackQueryHandler(set_status, pattern='^setstatus_'))
    dp.add_handler(CallbackQueryHandler(call_client, pattern='^call_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()