"""
üõ† –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ô –ë–û–¢ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ê–ú–ò

‚ñå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚îú‚îÄ‚îÄ üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö (—á–µ—Ä–µ–∑ Telegram Notifier –≤ Google Apps Script)
‚îú‚îÄ‚îÄ ‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ ("–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
‚îú‚îÄ‚îÄ üìû –ë—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞)
"""

import logging
import sys
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CallbackQueryHandler, ContextTypes, CommandHandler
from services.gsheets import update_status
from config import TELEGRAM_ADMIN_TOKEN, ADMIN_CHAT_ID

logging.basicConfig(
    format="üõ† [%(asctime)s] %(name)s ‚îÇ %(levelname)-8s ‚îÇ %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("admin_bot.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è Google Apps Script —á–µ—Ä–µ–∑ Webhook)
async def notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = update.message.text  # –ñ–¥—ë–º —Ñ–æ—Ä–º–∞—Ç: ID;–ê–¥—Ä–µ—Å;–¢–µ–ª–µ—Ñ–æ–Ω;–î–∞—Ç–∞;–°—Ç–∞—Ç—É—Å

        if ";" not in data:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        id_, address, phone, date, status = data.split(";")

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"tel:{phone}")],
            [
                InlineKeyboardButton("üü° –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status|{id_}|–í —Ä–∞–±–æ—Ç–µ"),
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data=f"status|{id_}|–ó–∞–≤–µ—Ä—à–µ–Ω–∞"),
            ]
        ])

        msg = (
            f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
            f"üìç –ê–¥—Ä–µ—Å: {address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üïí –î–∞—Ç–∞: {date}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status}"
        )

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=msg,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

# üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ (—Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞)
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        if query.data.startswith("status|"):
            _, row_id, new_status = query.data.split("|")

            update_status(row_id, new_status)

            await query.edit_message_text(
                text=f"üìù –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{row_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {new_status}"
            )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞")
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")

# üîÑ –†—É—á–Ω–æ–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fake = "42;–≥. –ü—Ä–∏–º–µ—Ä, —É–ª. –õ–µ–Ω–∏–Ω–∞ 10;+7-900-123-45-67;2025-04-29 15:42;–ù–æ–≤–∞—è"
    update.message.text = fake
    await notify(update, context)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_admin_bot():
    app = Application.builder().token(TELEGRAM_ADMIN_TOKEN).build()

    app.add_handler(CommandHandler("test", test))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), notify))
    app.add_handler(CallbackQueryHandler(handle_callback))

    await app.run_polling()
