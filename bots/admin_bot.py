"""
Telegram –±–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö —É—Å–ª—É–≥.
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
- –ë—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
"""

import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
from services.gsheets import get_worksheet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="admin_bot.log"
)
logger = logging.getLogger(__name__)

# =============================================
# –¢–ï–ö–°–¢–û–í–´–ï –®–ê–ë–õ–û–ù–´
# =============================================

TEXTS = {
    "new_request": "üö® <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{id}</b>\n\n"
                   "üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
                   "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
                   "üìÖ <b>–î–∞—Ç–∞:</b> {date}\n\n"
                   "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    "no_requests": "üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
    "call": "–ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: {phone}",
    "status_changed": "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'"
}

# =============================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
# =============================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        new_requests = [r for r in records if r["–°—Ç–∞—Ç—É—Å"] == "–ù–æ–≤–∞—è"]
        
        if not new_requests:
            await update.message.reply_html(TEXTS["no_requests"])
            return
        
        for request in new_requests:
            message = TEXTS["new_request"].format(
                id=request["ID"],
                address=request["–ê–¥—Ä–µ—Å"],
                phone=request["–¢–µ–ª–µ—Ñ–æ–Ω"],
                date=request["–î–∞—Ç–∞"]
            )
            
            buttons = [
                [f"üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å {request['–¢–µ–ª–µ—Ñ–æ–Ω']}"],
                [f"üîÑ –í —Ä–∞–±–æ—Ç–µ #{request['ID']}"],
                [f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ #{request['ID']}"]
            ]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            
            await update.message.reply_html(
                text=message,
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")

async def handle_call(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞"""
    phone = update.message.text.replace("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å ", "")
    await update.message.reply_text(
        TEXTS["call"].format(phone=phone)
    )

async def handle_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        text = update.message.text
        request_id = text.split("#")[1]
        status = "–í —Ä–∞–±–æ—Ç–µ" if "üîÑ" in text else "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        
        worksheet = get_worksheet()
        cell = worksheet.find(request_id)
        worksheet.update_cell(cell.row, 5, status)
        
        await update.message.reply_html(
            TEXTS["status_changed"].format(id=request_id, status=status)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

# =============================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =============================================

def run_admin_bot(token: str):
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
        
        application = ApplicationBuilder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.Regex("^üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å"), handle_call))
        application.add_handler(MessageHandler(filters.Regex("^(üîÑ|‚úÖ)"), handle_status))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        logger.info("–ê–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞: {e}")
        raise