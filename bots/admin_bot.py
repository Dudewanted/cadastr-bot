"""
üõ† –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ô –ë–û–¢ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ê–ú–ò

‚ñå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚îú‚îÄ‚îÄ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
‚îú‚îÄ‚îÄ ‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
‚îú‚îÄ‚îÄ üìû –ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º
‚îî‚îÄ‚îÄ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

‚ñå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
‚úî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ python-telegram-bot 20.x
‚úî –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets
‚úî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
‚úî –ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥
"""

import logging
import pytz
from datetime import datetime
from typing import Dict, Any

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from services.gsheets import get_worksheet

# ====================
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´
# ====================

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='üõ† [%(asctime)s] %(levelname)s - %(name)s: %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('admin_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# ====================
# üóÇ –ö–û–ù–°–¢–ê–ù–¢–´ –ò –¢–ï–ö–°–¢–´
# ====================

# –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
STATUSES = {
    'new': 'üÜï –ù–æ–≤–∞—è',
    'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
}

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
TEXTS = {
    'welcome': 
        """
        üõ† <b>–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨</b>

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """,
    
    'request_details': 
        """
        üìã <b>–ó–ê–Ø–í–ö–ê #{id}</b>
        
        üìç –ê–¥—Ä–µ—Å: {address}
        üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
        üìÖ –î–∞—Ç–∞: {date}
        üè∑ –°—Ç–∞—Ç—É—Å: {status}
        """
}

# ====================
# üñ• –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ====================

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    buttons = [
        ["üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    
    await update.message.reply_text(
        text=TEXTS['welcome'],
        reply_markup=ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        ),
        parse_mode='HTML'
    )

async def show_new_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"""
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        new_requests = [r for r in records if r['–°—Ç–∞—Ç—É—Å'] == '–ù–æ–≤–∞—è']
        
        if not new_requests:
            await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            return
        
        for request in new_requests:
            keyboard = [
                [
                    InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"call_{request['–¢–µ–ª–µ—Ñ–æ–Ω']}"),
                    InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç—É", callback_data=f"progress_{request['ID']}")
                ],
                [
                    InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{request['ID']}")
                ]
            ]
            
            await update.message.reply_text(
                text=TEXTS['request_details'].format(
                    id=request['ID'],
                    address=request['–ê–¥—Ä–µ—Å'],
                    phone=request['–¢–µ–ª–µ—Ñ–æ–Ω'],
                    date=request['–î–∞—Ç–∞'],
                    status=STATUSES['new']
                ),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('call_'):
        phone = query.data.split('_')[1]
        await query.edit_message_text(f"üìû –ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: {phone}")
        
    elif query.data.startswith('progress_'):
        request_id = query.data.split('_')[1]
        await _update_request_status(request_id, 'in_progress', query)
        
    elif query.data.startswith('complete_'):
        request_id = query.data.split('_')[1]
        await _update_request_status(request_id, 'completed', query)

async def _update_request_status(request_id: str, status: str, query):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        worksheet = get_worksheet()
        cell = worksheet.find(request_id)
        worksheet.update_cell(cell.row, 5, STATUSES[status])
        
        await query.edit_message_text(
            text=f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{STATUSES[status]}'"
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

# ====================
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ====================

def run_admin_bot(token: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
        
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", show_main_menu))
        application.add_handler(MessageHandler(filters.Regex("^üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏$"), show_new_requests))
        application.add_handler(CallbackQueryHandler(handle_button_click))
        
        logger.info("ü§ñ –ê–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise