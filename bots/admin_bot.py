"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç (–≤–µ—Ä—Å–∏—è python-telegram-bot v20.x)
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
- –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
"""

import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from services.gsheets import get_worksheet

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê ====================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename='admin_bot.log'
)
logger = logging.getLogger(__name__)

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
EMOJI = {
    'new': 'üÜï',
    'call': 'üìû',
    'work': 'üîÑ',
    'done': '‚úÖ',
    'back': 'üîô'
}

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
async def check_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"""
    try:
        worksheet = get_worksheet()
        records = worksheet.get_all_records()
        new_requests = [r for r in records if r['–°—Ç–∞—Ç—É—Å'] == '–ù–æ–≤–∞—è']
        
        if not new_requests:
            await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            return
        
        for req in new_requests:
            buttons = [
                [f"{EMOJI['call']} –ü–æ–∑–≤–æ–Ω–∏—Ç—å {req['–¢–µ–ª–µ—Ñ–æ–Ω']}"],
                [f"{EMOJI['work']} –í —Ä–∞–±–æ—Ç–µ #{req['ID']}"],
                [f"{EMOJI['done']} –ó–∞–≤–µ—Ä—à–µ–Ω–æ #{req['ID']}"]
            ]
            
            text = (
                f"{EMOJI['new']} <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{req['ID']}</b>\n\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {req['–ê–¥—Ä–µ—Å']}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {req['–î–∞—Ç–∞']}"
            )
            
            await update.message.reply_text(
                text=text,
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True),
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫")

async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        text = update.message.text
        req_id = text.split('#')[1]
        new_status = '–í —Ä–∞–±–æ—Ç–µ' if EMOJI['work'] in text else '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
        
        worksheet = get_worksheet()
        cell = worksheet.find(req_id)
        worksheet.update_cell(cell.row, 5, new_status)
        
        await update.message.reply_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{req_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
def run_admin_bot(token: str):
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
        
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", check_requests))
        application.add_handler(
            MessageHandler(filters.Regex(f"^{EMOJI['call']}"), 
                         lambda u, c: u.message.reply_text(f"–ù–∞–±–µ—Ä–∏—Ç–µ: {u.message.text.split()[-1]}"))
        )
        application.add_handler(
            MessageHandler(filters.Regex(f"^({EMOJI['work']}|{EMOJI['done']})"), 
                         update_status)
        )
        
        logger.info("–ê–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞: {e}")
        raise