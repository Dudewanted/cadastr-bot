"""
ü§ñ –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –ë–û–¢ –î–õ–Ø –ì–ï–û–î–ï–ó–ò–ß–ï–°–ö–ò–• –£–°–õ–£–ì

‚ñå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚îú‚îÄ‚îÄ üìç –ü—Ä–∏–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏/–∞–¥—Ä–µ—Å–∞
‚îú‚îÄ‚îÄ üìû –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚îú‚îÄ‚îÄ üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets
‚îî‚îÄ‚îÄ üé® –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –º–µ–Ω—é

‚ñå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
‚úî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ python-telegram-bot 20.x
‚úî –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
‚úî –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
‚úî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞
"""

import logging
import pytz
from datetime import datetime
from typing import Dict, Any

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
    JobQueue
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from services.gsheets import append_to_sheet

# ====================
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´
# ====================

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (—è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º pytz –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='‚ñå %(asctime)s ‚îÇ %(name)-15s ‚îÇ %(levelname)-8s ‚îÇ %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('client_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ====================
# üóÇ –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê
# ====================

(
    MAIN_MENU,      # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    GET_LOCATION,   # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    GET_PHONE       # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
) = range(3)

# ====================
# üìù –¢–ï–ö–°–¢–û–í–´–ï –®–ê–ë–õ–û–ù–´
# ====================

TEXTS = {
    'welcome': 
        """
        üè† <b>–ì–ï–û–î–ï–ó–ò–ß–ï–°–ö–ò–ï –£–°–õ–£–ì–ò</b>

        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?
        """,
    
    'request': 
        """
        üìç <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>
        
        –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:
        """,
    
    'location_received':
        """
        ‚úÖ <b>–ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï –ü–†–ò–ù–Ø–¢–û</b>
        
        –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:
        """,
    
    'success':
        """
        ‚ú® <b>–ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê!</b>
        
        –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ 
        –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
        """
}

# ====================
# üñ• –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    buttons = [
        ["üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"],
        ["‚ùì –í–æ–ø—Ä–æ—Å—ã", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"]
    ]
    
    await update.message.reply_text(
        text=TEXTS['welcome'],
        reply_markup=ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        ),
        parse_mode='HTML'
    )
    return MAIN_MENU

async def start_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    buttons = [
        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
        ["üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    
    await update.message.reply_text(
        text=TEXTS['request'],
        reply_markup=ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True
        ),
        parse_mode='HTML'
    )
    return GET_LOCATION

async def process_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if update.message.location:
            # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
            loc = update.message.location
            context.user_data['location'] = {
                'type': 'geo',
                'lat': loc.latitude,
                'lon': loc.longitude
            }
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: {loc.latitude},{loc.longitude}")
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
            context.user_data['location'] = {
                'type': 'address',
                'text': update.message.text
            }
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: {update.message.text}")

        # –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_buttons = [
            [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        
        await update.message.reply_text(
            text=TEXTS['location_received'],
            reply_markup=ReplyKeyboardMarkup(
                phone_buttons,
                resize_keyboard=True
            ),
            parse_mode='HTML'
        )
        return GET_PHONE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return await start(update, context)

async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        phone = update.message.contact.phone_number if update.message.contact else update.message.text
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        location = context.user_data['location']
        address = f"{location['lat']},{location['lon']}" if location['type'] == 'geo' else location['text']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        append_to_sheet(
            address=address,
            phone=phone
        )
        
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {address}, {phone}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            text=TEXTS['success'],
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='HTML'
        )
        
        return await start(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    return await start(update, context)

# ====================
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ====================

def run_client_bot(token: str) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º Application —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
        application = (
            Application.builder()
            .token(token)
            .job_queue(
                job_queue=JobQueue(
                    scheduler=AsyncIOScheduler(timezone=TIMEZONE)
                )
            )
            .build()
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start),
                MessageHandler(filters.Regex("^üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), start_request)
            ],
            states={
                MAIN_MENU: [
                    MessageHandler(filters.Regex("^üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), start_request)
                ],
                GET_LOCATION: [
                    MessageHandler(filters.LOCATION, process_location),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_location),
                    MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), cancel)
                ],
                GET_PHONE: [
                    MessageHandler(filters.CONTACT, process_phone),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone),
                    MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), cancel)
                ]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
        
        application.add_handler(conv_handler)
        application.run_polling()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise