"""
ü§ñ –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –ë–û–¢ –î–õ–Ø –ì–ï–û–î–ï–ó–ò–ß–ï–°–ö–ò–• –£–°–õ–£–ì

‚ñå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚îú‚îÄ‚îÄ –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
‚îú‚îÄ‚îÄ –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚îú‚îÄ‚îÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets
‚îî‚îÄ‚îÄ –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –º–µ–Ω—é

‚ñå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
‚úî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ python-telegram-bot 20.x
‚úî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
‚úî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
"""

import io
import sys
import logging
import pytz
from datetime import datetime
from typing import Dict, Any

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from services.gsheets import append_to_sheet

# ====================
# üîß –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´
# ====================

# –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
TIMEZONE = pytz.timezone('Europe/Moscow')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='‚ñå %(asctime)s ‚îÇ %(levelname)-8s ‚îÇ %(name)s ‚îÇ %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('client_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# ====================
# üóÇ –°–û–°–¢–û–Ø–ù–ò–Ø –ë–û–¢–ê
# ====================
(
    MAIN_MENU,
    GET_LOCATION,
    GET_PHONE
) = range(3)

# ====================
# üìù –¢–ï–ö–°–¢–û–í–´–ï –®–ê–ë–õ–û–ù–´
# ====================
TEXTS = {
    'welcome': 
        """
        üè† <b>–ì–ï–û–î–ï–ó–ò–ß–ï–°–ö–ò–ï –£–°–õ–£–ì–ò</b>

        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?
        """,
    
    'request': 
        """
        üìç <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>
        
        –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:
        """
}

# ====================
# üñ• –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    buttons = [
        ["üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"],
        ["‚ùì –í–æ–ø—Ä–æ—Å—ã", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["‚ÑπÔ∏è –û –Ω–∞—Å"]
    ]
    
    await update.message.reply_text(
        text=TEXTS['welcome'],
        reply_markup=ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        ),
        parse_mode='HTML'
    )
    return MAIN_MENU

async def setup_timezone(app: Application) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        app.job_queue.scheduler = AsyncIOScheduler(timezone=TIMEZONE)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {TIMEZONE}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã: {e}")
        raise

# ====================
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ====================

def run_client_bot(token: str) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
        
        application = Application.builder() \
            .token(token) \
            .post_init(setup_timezone) \
            .build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                MAIN_MENU: [
                    MessageHandler(filters.Regex("^üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), start_request)
                ],
                GET_LOCATION: [
                    MessageHandler(filters.LOCATION, process_location),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_location)
                ],
                GET_PHONE: [
                    MessageHandler(filters.CONTACT, process_phone),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone)
                ]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
        
        application.add_handler(conv_handler)
        application.run_polling()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise