import os
import telebot
from telebot import types
from dotenv import load_dotenv
from google_sheets import add_request
import uuid
from datetime import datetime

load_dotenv()

bot = telebot.TeleBot(os.getenv('CLIENT_BOT_TOKEN'))
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.row("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
main_menu.row("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –Ω–∞—Å")

request_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
request_menu.row("üåç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å")
request_menu.row("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
request_menu.row("üîô –ù–∞–∑–∞–¥")

phone_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
phone_menu.add(types.KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True))
phone_menu.row("üîô –ù–∞–∑–∞–¥")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, 
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö —Ä–∞–±–æ—Ç!",
                    reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
def start_request(message):
    bot.send_message(message.chat.id, 
                    "–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:",
                    reply_markup=request_menu)

@bot.message_handler(func=lambda m: m.text in ["üåç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å"])
def ask_location(message):
    if message.text == "üåç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é":
        bot.send_message(message.chat.id, 
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
                        reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id,
                        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:",
                        reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(content_types=['location'])
def handle_location(message):
    lat = message.location.latitude
    lon = message.location.longitude
    user_data[message.chat.id] = {'address': f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {lat}, {lon}"}
    bot.send_message(message.chat.id, 
                    "–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:",
                    reply_markup=phone_menu)

@bot.message_handler(func=lambda m: m.text == "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" or m.text == "üîô –ù–∞–∑–∞–¥")
def handle_navigation(message):
    if message.text == "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
        bot.send_message(message.chat.id,
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º:",
                        reply_markup=phone_menu)
    else:
        bot.send_message(message.chat.id,
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=main_menu)

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.chat.id not in user_data:
        bot.send_message(message.chat.id,
                        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞",
                        reply_markup=request_menu)
        return
    
    phone = message.contact.phone_number
    address = user_data[message.chat.id]['address']
    
    if add_request(address, phone):
        bot.send_message(message.chat.id,
                        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                        reply_markup=main_menu)
        del user_data[message.chat.id]
    else:
        bot.send_message(message.chat.id,
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
def show_faq(message):
    faq = {
        "–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è": "–û–±—ã—á–Ω–æ 5-10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥": "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç",
        "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã": "–ü–∞—Å–ø–æ—Ä—Ç, –ø—Ä–∞–≤–æ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    }
    
    keyboard = types.InlineKeyboardMarkup()
    for question in faq:
        keyboard.add(types.InlineKeyboardButton(
            text=question,
            callback_data=f"faq_{question}"))
    
    bot.send_message(message.chat.id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
                    reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('faq_'))
def answer_faq(call):
    question = call.data[4:]
    answers = {
        "–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è": "–û–±—ã—á–Ω–æ 5-10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥": "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç",
        "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã": "–ü–∞—Å–ø–æ—Ä—Ç, –ø—Ä–∞–≤–æ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    }
    bot.answer_callback_query(call.id, answers.get(question, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"))

@bot.message_handler(func=lambda m: m.text in ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –Ω–∞—Å"])
def show_info(message):
    if message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        text = ("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
               "üìß Email: example@mail.com\n"
               "üè¢ –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123")
    else:
        text = ("–ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö —É—Å–ª—É–≥:\n"
               "- –ú–µ–∂–µ–≤–∞–Ω–∏–µ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤\n"
               "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π —É—á–µ—Ç\n"
               "- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤")
    
    bot.send_message(message.chat.id, text, reply_markup=main_menu)

if __name__ == '__main__':
    bot.polling(none_stop=True)