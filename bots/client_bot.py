import json
import logging
from telegram import (
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Updater,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    CallbackQueryHandler
)
import os
from dotenv import load_dotenv
from gsheets import append_to_sheet, get_worksheet
from datetime import datetime
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
(
    SEND_LOCATION,
    SEND_PHONE,
    FAQ,
    CONTACTS,
    ABOUT
) = range(5)

# –ö—ç—à —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
faq_cache = None

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [
            InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='send_request'),
            InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='faq')
        ],
        [
            InlineKeyboardButton("üìå –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts'),
            InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data='about')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()

    if query.data == 'send_request':
        request_menu(update, context)
    elif query.data == 'faq':
        show_faq_menu(update, context)
    elif query.data == 'contacts':
        show_contacts(update, context)
    elif query.data == 'about':
        show_about(update, context)
    elif query.data.startswith('faq_'):
        show_faq_answer(update, context)

def request_menu(update: Update, context: CallbackContext) -> None:
    """–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [
            KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
            KeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")
        ],
        [KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    query = update.callback_query
    if query:
        query.edit_message_text(
            text="üìã –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
                 "1. –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ –∞–¥—Ä–µ—Å)\n"
                 "2. –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            "üìã –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
            "1. –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ –∞–¥—Ä–µ—Å)\n"
            "2. –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    return SEND_LOCATION

def handle_location(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    location = update.message.location
    context.user_data['location'] = f"{location.latitude},{location.longitude}"
    
    update.message.reply_text(
        "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω "
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
            resize_keyboard=True
        )
    )
    
    return SEND_PHONE

def handle_address(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    address = update.message.text
    context.user_data['address'] = address
    
    update.message.reply_text(
        "‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω "
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
            resize_keyboard=True
        )
    )
    
    return SEND_PHONE

def handle_phone(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text
    
    context.user_data['phone'] = phone
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å/–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    location = context.user_data.get('location', context.user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
    data = [
        str(update.effective_user.id),
        location,
        phone,
        datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S'),
        "–ù–æ–≤–∞—è"
    ]
    
    try:
        append_to_sheet(data)
        update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error saving to Google Sheets: {e}")
        update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    start(update, context)
    return ConversationHandler.END

def load_faq():
    """–ó–∞–≥—Ä—É–∑–∫–∞ FAQ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global faq_cache
    if faq_cache is None:
        try:
            with open('data/faq.json', 'r', encoding='utf-8') as f:
                faq_cache = json.load(f)
        except Exception as e:
            logger.error(f"Error loading FAQ: {e}")
            faq_cache = {}
    return faq_cache

def show_faq_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é FAQ"""
    faq = load_faq()
    keyboard = [
        [InlineKeyboardButton(q, callback_data=f'faq_{i}')]
        for i, q in enumerate(faq.keys())
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
    
    query = update.callback_query
    if query:
        query.edit_message_text(
            text="‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        update.message.reply_text(
            text="‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

def show_faq_answer(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å FAQ"""
    query = update.callback_query
    faq_id = int(query.data.split('_')[1])
    faq = load_faq()
    
    questions = list(faq.keys())
    if 0 <= faq_id < len(questions):
        question = questions[faq_id]
        answer = faq[question]
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='faq')]]
        query.edit_message_text(
            text=f"‚ùì <b>{question}</b>\n\n{answer}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

def show_contacts(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    contacts_text = (
        "üìå <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∞—è, –¥. 42\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
        "üìß Email: geodetic@example.com\n\n"
        "‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç —Å 9:00 –¥–æ 18:00"
    )
    
    query = update.callback_query
    if query:
        query.edit_message_text(
            text=contacts_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            )
        )
    else:
        update.message.reply_text(
            text=contacts_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            )
        )

def show_about(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    about_text = (
        "‚ÑπÔ∏è <b>–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø–æ–ª–Ω—ã–º –∫–æ–º–ø–ª–µ–∫—Å–æ–º –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç:\n"
        "- –ú–µ–∂–µ–≤–∞–Ω–∏–µ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤\n"
        "- –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã\n"
        "- –¢–æ–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—ä–µ–º–∫–∞\n"
        "- –í—ã–Ω–æ—Å –≥—Ä–∞–Ω–∏—Ü –≤ –Ω–∞—Ç—É—Ä—É\n\n"
        "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 10 –ª–µ—Ç!"
    )
    
    query = update.callback_query
    if query:
        query.edit_message_text(
            text=about_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            )
        )
    else:
        update.message.reply_text(
            text=about_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            )
        )

def cancel(update: Update, context: CallbackContext) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=ReplyKeyboardRemove()
    )
    start(update, context)
    return ConversationHandler.END

def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    try:
        update.message.reply_text(
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
    except:
        pass

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    load_dotenv()
    updater = Updater(os.getenv('CLIENT_BOT_TOKEN'))
    
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('cancel', cancel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(request_menu, pattern='^send_request$')],
        states={
            SEND_LOCATION: [
                MessageHandler(Filters.location, handle_location),
                MessageHandler(Filters.text & ~Filters.command, handle_address)
            ],
            SEND_PHONE: [
                MessageHandler(Filters.contact | Filters.text & ~Filters.command, handle_phone)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    dp.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()